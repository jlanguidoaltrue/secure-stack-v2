"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mongoose-field-encryption";
exports.ids = ["vendor-chunks/mongoose-field-encryption"];
exports.modules = {

/***/ "(ssr)/../backend/node_modules/mongoose-field-encryption/lib/mongoose-field-encryption.js":
/*!******************************************************************************************!*\
  !*** ../backend/node_modules/mongoose-field-encryption/lib/mongoose-field-encryption.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\n\nconst algorithm = \"aes-256-cbc\";\nconst deprecatedAlgorithm = \"aes-256-ctr\";\nconst encryptedFieldNamePrefix = \"__enc_\";\nconst encryptedFieldDataSuffix = \"_d\";\n\nconst encryptAes256Ctr = function(text, secret) {\n  const cipher = crypto.createCipher(deprecatedAlgorithm, secret);\n  let crypted = cipher.update(text, \"utf8\", \"hex\");\n  crypted += cipher.final(\"hex\");\n  return crypted;\n};\n\nconst decryptAes256Ctr = function(encryptedHex, secret) {\n  const decipher = crypto.createDecipher(deprecatedAlgorithm, secret);\n  let dec = decipher.update(encryptedHex, \"hex\", \"utf8\");\n  dec += decipher.final(\"utf8\");\n  return dec;\n};\n\nconst encrypt = function(clearText, secret, saltGenerator) {\n  const iv = saltGeneratorWrapper(saltGenerator(secret));\n  const cipher = crypto.createCipheriv(algorithm, secret, iv);\n  const encrypted = cipher.update(clearText);\n  const finalBuffer = Buffer.concat([encrypted, cipher.final()]);\n  const encryptedHex = iv.toString(\"hex\") + \":\" + finalBuffer.toString(\"hex\");\n  return encryptedHex;\n};\n\nconst saltGeneratorWrapper = iv => {\n  if (iv instanceof Buffer) {\n    if (iv.length !== 16) {\n      throw new Error(\"Invalid salt provided, please ensure that the salt is a Buffer of length 16\");\n    }\n    return iv;\n  }\n\n  if (typeof iv === \"string\" || iv instanceof String) {\n    if (iv.length !== 16) {\n      throw new Error(\"Invalid salt, please ensure that the salt is a string of length 16\");\n    }\n    return Buffer.from(iv);\n  }\n\n  throw new Error(\"Invalid salt, please ensure that the salt is either a string or a Buffer of length 16\");\n};\n\nconst defaultSaltGenerator = secret => crypto.randomBytes(16);\n\n/**\n * Decryption has a default fallback for the deprecated algorithm\n *\n * @param {*} encryptedHex\n * @param {*} secret\n */\nconst decrypt = function(encryptedHex, secret) {\n  const encryptedArray = encryptedHex.split(\":\");\n\n  // maintain backwards compatibility\n  if (encryptedArray.length === 1) {\n    return decryptAes256Ctr(encryptedArray[0], secret);\n  }\n\n  const iv = new Buffer.from(encryptedArray[0], \"hex\");\n  const encrypted = new Buffer.from(encryptedArray[1], \"hex\");\n  const decipher = crypto.createDecipheriv(algorithm, secret, iv);\n  const decrypted = decipher.update(encrypted);\n  const clearText = Buffer.concat([decrypted, decipher.final()]).toString();\n  return clearText;\n};\n\nconst fieldEncryption = function(schema, options) {\n  if (!options || !options.secret) {\n    throw new Error(\"missing required secret\");\n  }\n\n  const useAes256Ctr = options.useAes256Ctr || false;\n  const fieldsToEncrypt = options.fields || [];\n\n  const hash = crypto.createHash(\"sha256\");\n  hash.update(options.secret);\n\n  const secret = useAes256Ctr ? options.secret : hash.digest(\"hex\").substring(0, 32);\n  const encryptionStrategy = useAes256Ctr ? encryptAes256Ctr : encrypt;\n  const saltGenerator = options.saltGenerator ? options.saltGenerator : defaultSaltGenerator;\n\n  // add marker fields to schema\n  for (const field of fieldsToEncrypt) {\n    const encryptedFieldName = encryptedFieldNamePrefix + field;\n    const encryptedFieldData = encryptedFieldName + encryptedFieldDataSuffix;\n    const schemaField = {};\n\n    schemaField[encryptedFieldName] = { type: Boolean };\n    schemaField[encryptedFieldData] = { type: String };\n    schema.add(schemaField);\n  }\n\n  //\n  // local methods\n  //\n\n  // for mongoose 4/5 compatibility\n  const defaultNext = function defaultNext(err) {\n    if (err) {\n      throw err;\n    }\n  };\n\n  function getCompatitibleNextFunc(next) {\n    if (typeof next !== \"function\") {\n      return defaultNext;\n    }\n    return next;\n  }\n\n  function getCompatibleData(next, data) {\n    // in mongoose5, 'data' field is undefined\n    if (!data) {\n      return next;\n    }\n    return data;\n  }\n\n  function encryptFields(obj, fields, secret) {\n    for (const field of fields) {\n      const encryptedFieldName = encryptedFieldNamePrefix + field;\n      const encryptedFieldData = encryptedFieldName + encryptedFieldDataSuffix;\n      const fieldValue = obj[field];\n\n      if (!obj[encryptedFieldName] && fieldValue) {\n        if (typeof fieldValue === \"string\") {\n          // handle strings separately to maintain searchability\n          const value = encryptionStrategy(fieldValue, secret, saltGenerator);\n          obj[field] = value;\n        } else {\n          const value = encryptionStrategy(JSON.stringify(fieldValue), secret, saltGenerator);\n          obj[field] = undefined;\n          obj[encryptedFieldData] = value;\n        }\n\n        obj[encryptedFieldName] = true;\n      }\n    }\n  }\n\n  function decryptFields(obj, fields, secret) {\n    for (const field of fields) {\n      const encryptedFieldName = encryptedFieldNamePrefix + field;\n      const encryptedFieldData = encryptedFieldName + encryptedFieldDataSuffix;\n\n      if (obj[encryptedFieldName]) {\n        if (obj[encryptedFieldData]) {\n          const encryptedValue = obj[encryptedFieldData];\n\n          obj[field] = JSON.parse(decrypt(encryptedValue, secret));\n          obj[encryptedFieldName] = false;\n          obj[encryptedFieldData] = \"\";\n        } else {\n          // If the field has been marked to not be retrieved, it'll be undefined\n          if (obj[field]) {\n            // handle strings separately to maintain searchability\n            const encryptedValue = obj[field];\n            obj[field] = decrypt(encryptedValue, secret);\n            obj[encryptedFieldName] = false;\n          }\n        }\n      }\n    }\n  }\n\n  function updateHook(_next) {\n    const next = getCompatitibleNextFunc(_next);\n    for (const field of fieldsToEncrypt) {\n      const encryptedFieldName = encryptedFieldNamePrefix + field;\n      this._update.$set = this._update.$set || {};\n      const plainTextValue = this._update.$set[field] || this._update[field];\n      const encryptedFieldValue = this._update.$set[encryptedFieldName] || this._update[encryptedFieldName];\n\n      if (!encryptedFieldValue && plainTextValue) {\n        const updateObj = {};\n        if (typeof plainTextValue === \"string\" || plainTextValue instanceof String) {\n          const encryptedData = encryptionStrategy(plainTextValue, secret, saltGenerator);\n\n          updateObj[field] = encryptedData;\n          updateObj[encryptedFieldName] = true;\n        } else {\n          const encryptedFieldData = encryptedFieldName + encryptedFieldDataSuffix;\n\n          updateObj[field] = undefined;\n          updateObj[encryptedFieldData] = encryptionStrategy(JSON.stringify(plainTextValue), secret, saltGenerator);\n          updateObj[encryptedFieldName] = true;\n        }\n        this.update({}, Object.keys(this._update.$set).length > 0 ? { $set: updateObj } : updateObj);\n      }\n    }\n\n    next();\n  }\n\n  //\n  // static methods\n  //\n\n  schema.methods.stripEncryptionFieldMarkers = function() {\n    for (const field of fieldsToEncrypt) {\n      const encryptedFieldName = encryptedFieldNamePrefix + field;\n      const encryptedFieldData = encryptedFieldName + encryptedFieldDataSuffix;\n\n      this.set(encryptedFieldName, undefined);\n      this.set(encryptedFieldData, undefined);\n    }\n  };\n\n  schema.methods.decryptFieldsSync = function() {\n    decryptFields(this, fieldsToEncrypt, secret);\n  };\n\n  schema.methods.encryptFieldsSync = function() {\n    encryptFields(this, fieldsToEncrypt, secret);\n  };\n\n  //\n  // hooks\n  //\n\n  schema.post(\"init\", function(_next, _data) {\n    const next = getCompatitibleNextFunc(_next);\n    const data = getCompatibleData(_next, _data);\n    try {\n      decryptFields(data, fieldsToEncrypt, secret);\n      next();\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  schema.pre(\"save\", function(_next) {\n    const next = getCompatitibleNextFunc(_next);\n\n    try {\n      encryptFields(this, fieldsToEncrypt, secret);\n      next();\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  schema.pre(\"findOneAndUpdate\", updateHook);\n\n  schema.pre(\"update\", updateHook);\n};\n\nmodule.exports.fieldEncryption = fieldEncryption;\nmodule.exports.encrypt = encrypt;\nmodule.exports.decrypt = decrypt;\nmodule.exports.encryptAes256Ctr = encryptAes256Ctr;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../backend/node_modules/mongoose-field-encryption/lib/mongoose-field-encryption.js\n");

/***/ })

};
;